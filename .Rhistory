usethis::use_package("tidyverse")
usethis::use_package("caret")
usethis::use_package("tidyr")
usethis::use_package("dplyr")
usethis::use_package("stats")
usethis::use_package("magrittr")
usethis::use_package("ggplot2")
usethis::use_pipe()
devtools::document()
usethis::use_pipe()
devtools::load_all(".")
compareModels(model_list = allModels,
test_data = ames_test_engineered,
model_order = "RMSE")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(caret)
library(tidymodels)
library(AmesHousing)
theme_set(theme_minimal())
engineer_features_allames <-
recipe(Sale_Price ~ ., data = ames_train) %>%
step_log(Sale_Price, base = 10) %>% # log(Sale_Price)
step_other(all_nominal(), threshold = 0.01) %>%
step_nzv(all_nominal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)
library(tidyverse)
library(caret)
library(tidymodels)
library(naniar)
library(ggplot2)
library(GGally)
library(corrplot)
library(AmesHousing)
library(ggcorrplot)
library(plotly)
#theme_set(theme_gray())
ameshousing <- AmesHousing::make_ames()
ameshousing_uncleaned <- AmesHousing::ames_raw
ameshousing <-
ameshousing %>%
filter(Gr_Liv_Area <= 4000)
ameshousing<-
ameshousing %>%
mutate(Time_Since_Remodel = Year_Sold - Year_Remod_Add,
House_Age = Year_Sold - Year_Built) %>%
select(-Year_Remod_Add, -Year_Built)
set.seed(42) # so we all get the same results
ames_split <- initial_split(ameshousing, prop = 0.7, strata = "Sale_Price")
ames_train <- training(ames_split)
ames_test <- testing(ames_split)
saveRDS(ames_train, "./models/ames_train.Rds")
saveRDS(ames_test, "./models/ames_test.Rds")
readRDS("./models/ames_train.Rds")
readRDS("./models/ames_test.Rds")
ames_train<-readRDS("./models/ames_train.Rds")
ames_test<-readRDS("./models/ames_test.Rds")
engineer_features_allames <-
recipe(Sale_Price ~ ., data = ames_train) %>%
step_log(Sale_Price, base = 10) %>% # log(Sale_Price)
step_other(all_nominal(), threshold = 0.01) %>%
step_nzv(all_nominal()) %>%
step_integer(matches("Qual|Cond|QC|Qu")) %>%
step_center(all_numeric(), -all_outcomes()) %>%
step_scale(all_numeric(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)
engineer_features_allames_prep <- prep(engineer_features_allames,
training = ames_train,
verbose = TRUE)
#get transformed training data set
ames_train_engineered <- juice(engineer_features_allames_prep)
#get transformed testing data set
ames_test_engineered <- bake(engineer_features_allames_prep, new_data = ames_test)
ames_resamplingCV <- trainControl(
method = "repeatedcv",
number = 10, #  k = 10
repeats = 5, # repeat 5 times,
savePredictions = "final" # save predictions for the best hyperparameter set
)
myLinearRegression <- function(df, formula){
set.seed(42)
tmp <-  train(
formula,
data = df,
method = "lm",
trControl = ames_resamplingCV)
print(summary(tmp))
return(tmp)
}
ames_lm1 <- ames_train_engineered %>%
myLinearRegression(Sale_Price ~ Gr_Liv_Area)
ames_lm2 <- ames_train_engineered %>%
myLinearRegression(Sale_Price ~ Gr_Liv_Area + Second_Flr_SF)
ames_lm2i <-  ames_train_engineered %>%
myLinearRegression(Sale_Price ~ Gr_Liv_Area + Second_Flr_SF +Gr_Liv_Area:Second_Flr_SF)
ames_lm2year <-  ames_train_engineered %>%
myLinearRegression(Sale_Price ~ Gr_Liv_Area + House_Age)
ames_lm3 <-  ames_train_engineered %>%
myLinearRegression(Sale_Price ~ Gr_Liv_Area + House_Age + Overall_Qual)
ames_lm_all <- ames_train_engineered %>%
myLinearRegression(Sale_Price ~.)
allModels<-list("Gr_Liv_Area" = ames_lm1,
"Gr_Liv_Area + House_Age" = ames_lm2year,
"Gr_Liv_Area + Second_Flr_SF" = ames_lm2,
"Gr_Liv_Area:Second_Flr_SF" = ames_lm2i,
"Gr_Liv_Area + House_Age + Overall_Qual" = ames_lm3,
"All vars" = ames_lm_all
)
allResamples <- resamples(allModels)
bwplot(allResamples,scales = list(x = list(relation = "free")))
parallelplot(allResamples, metric = "RMSE")
allPreds<-lapply(allModels,predict,ames_test_engineered) %>%
unlist() %>%
matrix(.,ncol = length(allModels)) %>%
{colnames(.)<-names(allModels);
.}
test_results<-apply(allPreds, 2, postResample, obs = ames_test_engineered$Sale_Price)
ggbarplot(sort(test_results["RMSE",]))
compareModels(model_list = allModels,
test_data = ames_test_engineered,
model_order = "RMSE")
load_all()
devtools::load_all()
compareModels(model_list = allModels,
test_data = ames_test_engineered,
model_order = "RMSE")
devtools::load_all()
compareModels(model_list = allModels,
test_data = ames_test_engineered,
model_order = "RMSE")
p <- compareModels(model_list = allModels,
test_data = ames_test_engineered,
model_order = "RMSE")
p
devtools::load_all()
p <- compareModels(model_list = allModels,
test_data = ames_test_engineered,
model_order = "RMSE")
p
print(p)
2+@
2+2
View(p)
print(p)
